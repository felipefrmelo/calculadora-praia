{"version":3,"sources":["App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","gridTemplateColumns","gridColumnGap","marginBottom","App","classes","useState","rows","setRows","descricao","valor","fields","setFields","formatter","Intl","NumberFormat","style","currency","handleChange","e","target","name","value","a","preventDefault","localStorage","setItem","JSON","stringify","factoryFields","id","newRows","filter","row","useEffect","r","getItem","parse","columns","field","headerName","width","renderCell","format","Number","col2","Button","variant","color","size","marginLeft","onClick","handleDelete","height","className","onSubmit","TextField","onChange","label","type","hideFooter","position","bottom","Grid","container","alignItems","spacing","direction","item","reduce","soma","length","col1","col3","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68d363b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  DataGrid,\n  RowsProp,\n  ColDef,\n  ValueFormatterParams,\n} from \"@material-ui/data-grid\";\nimport { Button, TextField, Grid } from \"@material-ui/core\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 1fr 1fr\",\n      gridColumnGap: \"2ch\",\n      marginBottom: \"5ch\",\n    },\n  })\n);\n\ninterface IFields {\n  descricao?: string;\n  valor?: string;\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const [rows, setRows] = useState<RowsProp>([]);\n  const [fields, setFields] = useState<IFields>({ descricao: \"\", valor: \"\" });\n  var formatter = new Intl.NumberFormat(\"pt-BR\", {\n    style: \"currency\",\n    currency: \"BRL\",\n  });\n\n  useEffect(() => {\n    const r = localStorage.getItem(\"rows\");\n    if (r) setRows(JSON.parse(r));\n  }, []);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const { name, value } = e.target;\n    setFields({ ...fields, [name]: value });\n  }\n\n  async function handleSubmit(e: React.ChangeEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    await localStorage.setItem(\n      \"rows\",\n      JSON.stringify([...rows, factoryFields()])\n    );\n\n    setRows([...rows, factoryFields()]);\n    setFields({ descricao: \"\", valor: \"\" });\n  }\n\n  async function handleDelete(id: number | string) {\n    const newRows = rows.filter((row) => row.id !== id);\n\n    await localStorage.setItem(\"rows\", JSON.stringify(newRows));\n\n    setRows(newRows);\n  }\n\n  const columns: ColDef[] = [\n    { field: \"col1\", headerName: \"Descrição\", width: 230 },\n    {\n      field: \"col2\",\n      headerName: \"Valor\",\n      renderCell: ({ row }: ValueFormatterParams) => {\n        return <div>{formatter.format(Number(row.col2))}</div>;\n      },\n      width: 230,\n    },\n    {\n      field: \"col3\",\n      headerName: \" \",\n      width: 150,\n      renderCell: ({ row }: ValueFormatterParams) => (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          style={{ marginLeft: 16 }}\n          onClick={() => handleDelete(row.id)}\n        >\n          Deletar\n        </Button>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <div style={{ height: 500 }}>\n        <form className={classes.root} onSubmit={handleSubmit}>\n          <TextField\n            onChange={handleChange}\n            size=\"small\"\n            name=\"descricao\"\n            label=\"Descricao\"\n            value={fields.descricao}\n          />\n          <TextField\n            onChange={handleChange}\n            size=\"small\"\n            name=\"valor\"\n            label=\"Valor\"\n            value={fields.valor}\n          />\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            Adicionar\n          </Button>\n        </form>\n        <DataGrid hideFooter rows={rows} columns={columns} />\n      </div>\n      <div style={{ position: \"absolute\", bottom: 0 }}>\n        <Grid container alignItems=\"center\" spacing={3} direction=\"row\">\n          <Grid item>\n            <h2>Soma</h2>\n          </Grid>\n          <Grid item>\n            {formatter.format(\n              rows.reduce((soma, valor) => soma + Number(valor.col2), 0)\n            )}\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n\n  function factoryFields() {\n    return {\n      id: rows.length,\n      col1: fields.descricao,\n      col2: fields.valor,\n      col3: rows.length,\n    };\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}